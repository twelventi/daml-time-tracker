{-# LANGUAGE ApplicativeDo #-}

module Tests.TimeRecord where

import Daml.Script
import DA.Time
import DA.Date

import User
import Time

-- -- | A record containing all the parties that we will use in our script
data Parties = Parties
  with
    user1 : Party

test: Script ()
test = do
    user1 <- allocateParty "user1"
    user1Id <- validateUserId "user1"
    createUser (Daml.Script.User user1Id ( Some user1)) [CanActAs user1]

    --create the user contract
    userContract1 <- submit user1 do
        createCmd ( User.User user1 )

    -- TEST creating a record
    timeRecord1 <- submit user1 do
        exerciseCmd userContract1 Create with
            desc = "this is the first record"
            start = ( time ( date 2023 Jun 01 ) 0 0 0 )
            end = ( time ( date 2023 Jun 01 ) 4 0 0 )
            proj = "project1"    

    contractTimeRecord1 <-
        queryContractId @TimeRecord user1 timeRecord1

    -- assert the fields have been populated  correctly
    case contractTimeRecord1 of
        Some contract -> 
            do
            assert (contract.description == "this is the first record")
            assert (contract.startDate == ( time ( date 2023 Jun 01 ) 0 0 0 ))
            assert (contract.endDate == ( time ( date 2023 Jun 01 ) 4 0 0 ))
            assert (contract.project == "project1")
        None ->
            assert (False)
    -- END TEST creating a record


    -- TEST record fails when starttime is before end time
    submitMustFail user1 do
        exerciseCmd userContract1 Create with
            desc = "this is the first record"
            start = ( time ( date 2023 Jun 01 ) 4 0 0 )
            end = ( time ( date 2023 Jun 01 ) 0 0 0 )
            proj = "project1"    
    -- END TEST record fails when starttime is before end time

    -- TEST creating and updating a record
    timeRecord2 <-  submit user1 do
        exerciseCmd userContract1 Create with
            desc = "this is the first record"
            start = ( time ( date 2023 Jun 01 ) 0 0 0 )
            end = ( time ( date 2023 Jun 01 ) 4 0 0 )
            proj = "project1"    

    contractTimeRecord2 <- 
        queryContractId @TimeRecord user1 timeRecord2

    -- assert the fields have been populated  correctly
    case contractTimeRecord2 of
        Some contract -> 
            do
            assert (contract.description == "this is the first record")
            assert (contract.startDate == ( time ( date 2023 Jun 01 ) 0 0 0 ))
            assert (contract.endDate == ( time ( date 2023 Jun 01 ) 4 0 0 ))
            assert (contract.project == "project1")
        None ->
            assert (False)

    --update a time record
    updatedTimeRecord2 <- submit user1 do
        exerciseCmd userContract1 UpdateRecord with
            id = timeRecord2
            desc = "this is the first record"
            start = ( time ( date 2023 Jun 01 ) 0 0 0 )
            end = ( time ( date 2023 Jun 01 ) 5 0 0 )
            proj = "project1"
    
    contractUpdatedTimeRecord2 <- 
        queryContractId @TimeRecord user1 updatedTimeRecord2

    -- assert the fields have been populated  correctly
    case contractUpdatedTimeRecord2 of
        Some contract -> 
            do
            assert (contract.description == "this is the first record")
            assert (contract.startDate == ( time ( date 2023 Jun 01 ) 0 0 0 ))
            assert (contract.endDate == ( time ( date 2023 Jun 01 ) 5 0 0 ))
            assert (contract.project == "project1")
        None ->
            assert (False)

    -- END TEST creating and updating a record

    -- TEST Deleting a record
    timeRecord3 <-  submit user1 do
        exerciseCmd userContract1 Create with
            desc = "this is the first record"
            start = ( time ( date 2023 Jun 01 ) 0 0 0 )
            end = ( time ( date 2023 Jun 01 ) 4 0 0 )
            proj = "project1"    

    submit user1 do
        exerciseCmd userContract1 Delete with
            id = timeRecord3

    contractTimeRecord3 <- 
        queryContractId @TimeRecord user1 timeRecord3

    -- assert the fields have been populated  correctly
    case contractTimeRecord3 of
        Some contract -> 
            assert (False)
        None ->
            assert (True)
    -- END TEST Deleting a record

    pure ()